#+TITLE: My Emacs Configuration

* 1. Setup
Do setup first.

#+begin_src elisp
(defvar
  my/indent-width 2
  "Default number of spaces to indent each line.")

(defvar
  my-package-archives
  '(("gnu" . "https://elpa.gnu.org/packages/")
    ("melpa-stable" . "https://stable.melpa.org/packages/")
    ("org" . "https://orgmode.org/elpa/")
    ("melpa" . "https://melpa.org/packages/"))
  "Package archives.")

(defvar
  my-package-archive-priorities
  '(("melpa" . -1)
    ("org"   . -1))
  "Package archive priorities.")

(defvar
  my-system-time-locale
  "C"
  "Controls e.g. org-mode weekday names. `C' means: use English weekdays.")

(defvar
  my-spelling-default-dictionary
  "en_US"
  "The default dictionary to use.")

(defvar
  my-spelling-binary
  "hunspell"
  "Binary to use, specify full path if its not on PATH.")

(defvar
  my-projectile-project-search-path
  '("~/projects/")
  "List of folders projectile will scan for projects.")

(defvar
  my-markdown-command
  "pandoc"
  "Command to run markdown.")

(let ((env "LC_COLLATE")
      (collate "sv_SE.UTF-8"))
  (unless (string-equal collate (getenv env))
    (error (format "The environment variable %s is not set correctly.
On GNU/Linux, add this to the ~/.profile file:

  export %s=%s" env env collate))))
#+end_src
* 2. Core - Security
Setup security before any external calls.

#+begin_src elisp
(setq
 tls-checktrust t
 gnutls-verify-error t)
#+end_src

* 3. Core - Package setup
Setup package and use-package before any calls to use-package.

#+begin_src elisp
(require 'package)
(setq
 package-archives my-package-archives
 package-archive-priorities my-package-archive-priorities)
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
#+end_src
* 4. Core - Utils
My core utility functions.

#+begin_src elisp
(defun my-recompile-all ()
  "Recompile everything, including this directory and elpa.
It's sometimes necessary to recompile a package.
Remove the offending .elc files with e.g. `find *.elc -print0 | xargs -0 rm -f'
Then call this function."
  (interactive)
  (let ((this-dir (file-name-directory (or load-file-name buffer-file-name)))
        (elpa-dir (expand-file-name (concat user-emacs-directory "elpa")))
        (flag 0))  ; 0=DO compile .el file without corresponding .elc file
    (progn
      (byte-recompile-directory this-dir flag)
      (byte-recompile-directory elpa-dir flag))))

(defun my-copy-filename ()
  "Copy current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "File name copied: %s" filename))))

(defun my-split-window-horizontally ()
  "Split window horizontally and follow."
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))

(defun my-split-window-vertically ()
  "Split window vertically and follow."
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))

(defun my-kill-this-buffer ()
  "Kill current buffer without asking for confirmation.
Credit to http://pragmaticemacs.com/emacs/dont-kill-buffer-kill-this-buffer-instead/"
  (interactive)
  (kill-buffer (current-buffer)))
#+end_src

* Core - Custom
Save custom settings to Separate file and don't load it.

If we wanted to load it we could do
: (load custom-file 'noerror)

#+begin_src elisp
(setq custom-file (concat user-emacs-directory "custom.el"))
#+end_src

* Core - Encoding
I don't know what this does:
: (set-charset-priority 'unicode)
Doesn't seem to hurt though.

#+begin_src elisp
(prefer-coding-system 'utf-8-unix)
(set-default-coding-systems 'utf-8-unix)
(set-charset-priority 'unicode)
(set-language-environment "UTF-8")
#+end_src
* Core - Time stamp formatting
#+begin_src elisp
(setq system-time-locale my-system-time-locale)
#+end_src
* Core - Backup
Backups, auto-saves, sessions, lockfiles.

- backup files (~file)
  Emacs creates a backup file the first time a buffer is saved, and ONLY the first time
- auto-save files (#file#)
- session files (<pid>-<hostname>~)
  Emacs records information about interrupted sessions in files named
  <pid>-<hostname>~ in the directory specified by auto-save-list-file-prefix
- special "symbolic link" file on windows (.#file)
  created on first modification of buffer visiting a file
  created in the same directory as the file
  file is removed when changes are saved

See:
- https://www.gnu.org/software/emacs/manual/html_node/emacs/Recover.html

#+begin_src elisp
(let ((backup   `((".*" . ,(concat user-emacs-directory "backup/"))))
      (auto     `((".*" ,(concat user-emacs-directory "auto-save/") t)))
      (session   (concat user-emacs-directory "auto-save/")))
  (setq
    backup-by-copying-when-mismatch t ; try to preserve owner and group
    delete-old-versions t             ; delete excess backup versions silently
    version-control t                 ; make numeric backup versions unconditionally
    vc-make-backup-files t            ; do backup files under version control
    create-lockfiles nil              ; no lockfiles, I'm the only user
    kept-new-versions 16
    kept-old-versions 5
    backup-directory-alist backup
    auto-save-file-name-transforms auto
    auto-save-list-file-prefix session))
#+end_src
* Spellcheck
American and Swedish spellchecking with hunspell.

In order to get words like "couldn't" and "I'm" to work, I had to
manually edit the .aff file and add the apostrophe to
WORDCHARS, like this:

: WORDCHARS 0123456789’

To find where the dictionary files are, run the spellcheck once, then check
=ispell-hunspell-dict-paths-alist=

Switch dictionary with =M-x ispell-change-dictionary=

On Ubuntu 20.04
- Package =hunspell-sv= provides =/usr/share/hunspell/sv_SE.dic=
- Package =hunspell-en-us= provides =/usr/share/hunspell/en_US.dic= (may lack the apostrophe in WORDCHARS)

#+begin_src elisp
(setq
 ispell-program-name my-spelling-binary
 ispell-dictionary my-spelling-default-dictionary)
#+end_src
* Dired
#+begin_src elisp
(setq
 ls-lisp-use-insert-directory-program nil  ; use ls-lisp.el instead of cmd line ls
 ls-lisp-dirs-first t
 ls-lisp-use-localized-time-format t       ; use ls-lisp-format-time-list for time stamps
 ls-lisp-format-time-list
      '("%Y-%m-%d %H:%M"
        "%Y-%m-%d %H:%M")
 dired-listing-switches "-Alh"             ; DOES affect ls-lisp.el
 dired-dwim-target t)                      ; guess default target dir for some commands

(add-hook 'dired-mode-hook #'auto-revert-mode)

(require 'dired-x)

(when (string-equal "gnu/linux" system-type)
  (setq dired-guess-shell-alist-user
        '(("\\.pdf\\'" "xdg-open &")
          ("\\.html?\\'" "firefox &")
          ("\\.svg\\'" "eog &")
          ("\\.png\\'" "eog &")
          ("\\.gif\\'" "eog &")
          ("\\.jpe?g\\'" "eog &"))))

;; Prevent *Async Shell Command* buffer from popping up and taking
;; over half the screen when running async shell commands (&).
(add-to-list
 'display-buffer-alist
 (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
#+end_src

* Core - Uncategorized
#+begin_src elisp
(setq
 gc-cons-threshold (* 100 1024 1024)      ; boost garbage collection threshold
 large-file-warning-threshold 100000000   ; boost big file warning threshold
 epg-pinentry-mode 'loopback              ; allow query of passphrases in minibuffer
 backward-delete-char-untabify-method nil ; backward delete on tab simply deletes the tab
 shift-select-mode nil                    ; seems weird, don't want it
 enable-recursive-minibuffers t           ; allow interactive commands in minibuffer
 delete-by-moving-to-trash t              ; use system trash when applicable
 sentence-end-double-space nil            ; no, just no
 initial-scratch-message ""
 inhibit-startup-message t
 frame-title-format "%b"                  ; show buffername in frame title ...
 icon-title-format "%b"                   ; ... and in iconified frame title
 confirm-kill-emacs 'y-or-n-p             ; prevent accidental exit
 confirm-kill-processes nil               ; no comfirmation on killing processes
 require-final-newline nil                ; no final newline
 mode-require-final-newline nil           ; no final newline, really
 ring-bell-function 'ignore               ; don't ring the bell
 echo-keystrokes 0.3                      ; echo unfinished commands "immediately"
 x-stretch-cursor t                       ; stretch cursor over char, nice for tabs
 mouse-highlight nil)                     ; no highlight as mouse hovers over link

(fset 'yes-or-no-p 'y-or-n-p)             ; y/n is good enough
(put 'upcase-region 'disabled nil)        ; allow upcase-region
(put 'narrow-to-region 'disabled nil)     ; allow narrow-to-region

(defalias 'list-buffers 'ibuffer)

(show-paren-mode 1)                       ; show matching parentheses
(delete-selection-mode 1)                 ; replace selection with next typed char
(auto-image-file-mode 1)                  ; show images on visit
(tooltip-mode 0)                          ; show help text in minibuffer, not as tooltip
(tool-bar-mode 0)                         ; no icon tool bar
(menu-bar-mode 0)                         ; no menu bar
(blink-cursor-mode 0)                     ; no blinking cursor
(column-number-mode 1)
(line-number-mode 1)
(size-indication-mode 0)                  ; no buffer size info in modeline
(save-place-mode 1)                       ; go to last place in file on visit
(global-visual-line-mode 1)

(when window-system
  (global-hl-line-mode 1))                ; highlight current line

(setq abbrev-file-name (concat user-emacs-directory "abbrev_defs.el"))
(setq-default abbrev-mode t)

(add-hook 'before-save-hook #'delete-trailing-whitespace)

(setq
 auto-revert-verbose nil)
(global-auto-revert-mode t)               ; revert buffer if its file changes

(setq-default
 indent-tabs-mode nil                     ; no tabs for indentation, use spaces
 tab-width my/indent-width                ; distance between tab stops
 sh-basic-offset my/indent-width)
(setq tab-always-indent 'complete)        ; not all modes respect this variable

(setq
 savehist-file (concat user-emacs-directory "savehist")
 history-length t                         ; no truncation of history
 history-delete-duplicates t
 savehist-save-minibuffer-history t)      ; save all recorded minibuffer histories
(savehist-mode 1)

(setq
 electric-pair-preserve-balance nil
 electric-pair-skip-self t
 electric-pair-inhibit-predicate 'ignore
 electric-pair-skip-whitespace nil)
(electric-pair-mode 1)
#+end_src
* Core - GUI
** Scrollbars
#+begin_src elisp
(setq
 scroll-conservatively 10000              ; >100 so redisplay will never recenter point
 scroll-step 1                            ; lines to try to scroll when point moves out
 scroll-margin 3                          ; lines of context at top and bottom
 scroll-preserve-screen-position t        ; point stays on scroll
 hscroll-step 1)                          ; columns to scroll
(scroll-bar-mode 0)                       ; no scroll bar
#+end_src

** Window dividers
#+begin_src elisp
(setq
 window-divider-default-places 'right-only
 window-divider-default-right-width 3)
(window-divider-mode 1)
#+end_src

* Appearance
** delight (doom-modeline belongs in this)
#+begin_src elisp
(use-package delight
  :ensure t
  :pin gnu
  :config
  (delight 'abbrev-mode nil t)
  (delight 'visual-line-mode nil t)
  (delight 'eldoc-mode nil "eldoc")
  (delight 'auto-revert-mode nil t))
#+end_src

** all-the-icons
#+begin_src elisp
(use-package all-the-icons
  :ensure t
  :pin melpa-stable)
#+end_src

* Templates
** yasnippet
Custom snippets go in =~/.emacs.d/snippets= and take precedence

=yas-describe-tables= lists available snippets

#+begin_src elisp
(use-package yasnippet
  :ensure t
  :pin melpa-stable
  :commands
  yas-reload-all
  :delight yas-minor-mode
  :mode
  ("\\.yasnippet\\'" . snippet-mode)
  :config
  (yas-reload-all)
  (add-hook 'prog-mode-hook #'yas-minor-mode))
#+end_src
* Navigation
** avy
ivy uses avy if it's installed.

#+begin_src elisp
(use-package avy
  :ensure t
  :pin melpa-stable)
#+end_src

** ace-window

Using melpa because, at the time of writing, current version is 0.9.0 released 2015, with 97 commits since then.

See:
- https://github.com/abo-abo/ace-window

#+begin_src elisp
(use-package ace-window
  :ensure t
  :pin melpa-stable
  :init
  (setq
   aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
   aw-scope 'frame
   aw-background nil))
#+end_src
* Completion
** amx
amx prioritizes most-used commands in =M-x= completion list. I used to
use smex for this.

Also, ivy uses amx if it's installed.

#+begin_src elisp
(use-package amx
  :ensure t
  :pin melpa-stable)
#+end_src

** recentf
Keep a list of recently used files. ivy's virtual buffers
(=ivy-use-virtual-buffers)= can make good use of that list.

#+begin_src elisp
(setq
 recentf-save-file (concat user-emacs-directory "recentf")
 recentf-max-saved-items 1000)
(recentf-mode 1)
(run-at-time
 nil
 600
 (lambda ()
   (let ((inhibit-message t))
     (recentf-save-list))))
#+end_src

** ivy
Generic completion frontend (selection from list)

=C-o m= toggles the current regexp builder.

=(ivy-mode 1)= sets completing-read-function to ivy-completing-read.

[2020-11-28 Sat] gnu has a more recent version (0.13.1) than melpa-stable (0.13.0)

See:
- https://github.com/abo-abo/swiper
- http://oremacs.com/swiper/

#+begin_src elisp
(use-package ivy
  :ensure t
  :pin gnu
  :delight ivy-mode
  :init
  (setq
   ivy-count-format "(%d/%d) "
   ivy-height 20
   ivy-use-virtual-buffers t
   ivy-virtual-abbreviate 'full
   ivy-use-selectable-prompt t
   ivy-display-style 'fancy
   ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
  :config
  (ivy-mode 1)
  (custom-set-faces
   '(ivy-current-match
     ((((class color) (background light))
       :background "#ffff44" :foreground "#000000")
      (((class color) (background dark))
       :background "#ffff44" :foreground "#000000")))))
#+end_src

** ivy-rich
Rich info for ivy searches

See:
- https://github.com/Yevgnen/ivy-rich

#+begin_src elisp
(use-package ivy-rich
  :ensure t
  :pin melpa-stable
  :config
  (ivy-rich-mode 1))
#+end_src

** counsel
#+begin_src elisp
(use-package counsel
  :ensure t
  :pin gnu
  :delight counsel-mode
  :defer 1
  :config
  (counsel-mode 1))
#+end_src

** company
Text completion framework.

=company-begin-backend= can be used to start a specific backend

=M-n= / =M-p= cycles through options

=M-(digit)= completes one of the first 10 candidates.

Stops at the first backend (or group of backends) with a result.

Comes with plenty of backends built-in, see e.g. https://github.com/company-mode/company-mode

The most important backends for me:
- =company-capf=, supports any major mode with a proper completion function
- =company-dabbrev-code=, dynamic abbrev for code symbols
- =company-dabbrev=, dynamic abbrev, not mode-specific
- =company-files=, file names, not mode specific
- =company-keywords=, programming language keywords, supports many modes

#+begin_src elisp
(use-package company
  :ensure t
  :pin melpa-stable
  :delight company-mode
  :init
  (setq
   company-idle-delay 0.5
   company-minimum-prefix-length 3
   company-dabbrev-downcase nil
   company-dabbrev-ignore-case 'ignore-case-in-candidate-selection
   company-tooltip-align-annotations t
   company-backends
   '((company-files company-keywords company-capf)
     (company-dabbrev-code company-etags)
     company-dabbrev))
  :config
  (global-company-mode 1)
  :bind
  (:map company-active-map
        ("M-n" . nil)
        ("M-p" . nil)
        ("C-n" . company-select-next)
        ("C-p" . company-select-previous)))
#+end_src

* Searching
** swiper
isearch with an overview (incremental search)

Notable minibuffer key bindings:

=M-i= insert current candidate into the minibuffer

[2020-11-28 Sat] gnu has a more recent version (0.13.1) than melpa-stable (0.13.0)

See
- https://github.com/abo-abo/swiper

#+begin_src elisp
(use-package swiper
  :ensure t
  :pin gnu)
#+end_src
* Syntex checking
Standard tool for linting.

Provides syntax checking via external external programs or services.
Multiple checkers can be run in sequence, see
=flycheck-add-next-checker=.

Not using =global-flycheck-mode=, prefer to activate it when needed.

Using melpa, because latest version is 31, which was released in 2017,
and there's been 570+ commits since then.

| Key     | Description          |
|---------+----------------------|
| C-c ! v | verify setup         |
| C-c ! ? | describe checker     |
| C-c ! l | show error list      |
| M-g n   | go to next error     |
| M-g p   | go to previous error |

See:
- https://www.flycheck.org
- https://github.com/flycheck/flycheck

#+begin_src elisp
(use-package flycheck
  :ensure t
  :pin melpa)
#+end_src
* Discover
#+begin_src elisp
(use-package which-key
  :ensure t
  :pin melpa-stable
  :delight which-key-mode
  :config
  (which-key-mode))
#+end_src
* Help
** helpful
Nicer emacs help

See:
- https://github.com/Wilfred/helpful

#+begin_src elisp
(use-package helpful
  :ensure t
  :pin melpa-stable
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable))
#+end_src
* Gnuplot
Gnuplot support.

See:
- https://en.wikipedia.org/wiki/Gnuplot

#+begin_src elisp
(use-package gnuplot
  :ensure t
  :pin melpa-stable)
#+end_src
* Distraction-Free Writing
#+begin_src elisp
(use-package olivetti
  :ensure t
  :pin melpa-stable
  :delight olivetti-mode)

(define-derived-mode my-write-mode org-mode "my-write"
  "Major mode for writing."
  (progn
    (setq-local org-startup-indented nil)
    (company-mode -1)                     ; company distracts
    (local-set-key
     (kbd "\"")
     (lambda ()
       (interactive)
       (insert "“”")))
    (olivetti-mode t)))
#+end_src
* Magit
Magit is a complete text-based user interface to Git.

Most Magit commands are commonly invoked from the status buffer. It
can be considered the primary interface for interacting with Git
using Magit.

Status buffer commands:

| Key | Description                                                     |
|-----+-----------------------------------------------------------------|
| =p=   | prevous section                                                 |
| =n=   | next section                                                    |
| =q=   | quit                                                            |
| =TAB= | fold/unfold sections                                            |
| =s=   | stage at point to index, change remains in working tree         |
| =u=   | unstage at point from index, change remains in working tree     |
| =k=   | discard at point, remove from index if staged and working tree  |
| =v=   | reverse                                                         |
| =C-n= | next line inside hunk                                           |
| =C-p= | next/previous line inside hunk                                  |
| =C-.= | select part of hunk with C-. and C-n/C-p to stage/unstage parts |
|     | C-n stage or unstage next part of hunk                          |
|     | C-p stage or unstage previous part of hunk                      |
| =c=   | show commit commands                                            |
|     | C-c C-c create commit                                           |
| =P=   | show push commands                                              |
|     | p push                                                          |
| =h=   | list transients                                                 |

#+begin_src elisp
(use-package magit
  :ensure t
  :pin melpa-stable)
#+end_src

* Projectile
Commands available after prefix key:

| Key | Description                                                                   |
|-----+-------------------------------------------------------------------------------|
| =p=   | Switch to project                                                             |
| =f=   | Open file in project                                                          |
| =s g= | Run grep on the files in the project.                                         |
| =o=   | Runs multi-occur on all project buffers currently open.                       |
| =r=   | Runs interactive query-replace on all files in the projects.                  |
| =e=   | Shows a list of recently visited project files.                               |
| =!=   | Runs shell-command in the root directory of the project.                      |
| =C=   | Runs a standard configure command for your type of project.                   |
| =c=   | Runs a standard compilation command for your type of project.                 |
| =P=   | Runs a standard test command for your type of project.                        |
| =l=   | Display a list of all files in a directory (that’s not necessarily a project) |

The use-package way of defining a prefix key:
#+begin_example
:bind-keymap
("C-c p" . projectile-command-map)
#+end_example

Another way to do it:
#+begin_example
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_example

See:
- https://docs.projectile.mx/en/latest/

#+begin_src elisp
(use-package projectile
  :ensure t
  :pin melpa-stable
  :init
  (setq
   projectile-project-search-path my-projectile-project-search-path
   projectile-switch-project-action #'projectile-find-file
   projectile-mode-line-prefix " P"
   projectile-completion-system 'ivy
   projectile-sort-order 'recently-active)
  :config
  (projectile-register-project-type 'npm
                                    '("package.json")
                                    :compile "npm run build&"
                                    :test "npm run test&"
                                    :run "npm run start&"
                                    :test-suffix ".spec")
  (projectile-mode 1))
#+end_src

* HTML .html
My web-mode setup only supports editing .html files with the
go-engine. I don't use web-mode for anything else, yet.

web-mode issues:
- [2020-11-28 Sat] Current release 17 on melpa-stable was a bit buggy
  for me so I switched to melpa.
- It seems =web-mode-engines-alist= is the only way to specify the
  go-engine. I'd prefer to use .dir-locals, i.e. per project, but
  web-mode won't pick it up from there. =dir-locals-set-class-variables=
  doesn't seem to work either.

See:
- https://web-mode.org/

The package =company-web= provides company backend =company-web-html= for web-mode.

#+begin_src elisp
(use-package company-web
  :ensure t
  :pin melpa-stable)

(use-package web-mode
  :ensure t
  :pin melpa
  :defines
  web-mode-buffer-indent
  web-mode-buffer-fontify
  :init
  (setq
   web-mode-code-indent-offset my/indent-width
   web-mode-markup-indent-offset my/indent-width
   web-mode-enable-current-column-highlight t
   web-mode-enable-auto-expanding t           ; e.g. d/ becomes <div>|</div>
   web-mode-enable-auto-pairing nil)          ; using electric-pair-mode instead
  (setq web-mode-engines-alist
      '(("go"    . "\\.html\\'")))            ; must define it globally, unfortunately
  (defun my-web-mode-before-save-hook ()
    (progn
      (web-mode-buffer-indent)
      (web-mode-buffer-fontify)))
  (defun my-web-mode-hook ()
    (progn
      (set
       (make-local-variable 'company-backends)
       '((company-web-html company-files company-capf company-keywords)
         (company-dabbrev-code company-etags)
         company-dabbrev))
      (add-hook
       'before-save-hook
       #'my-web-mode-before-save-hook
       nil
       'make-it-local)))
  :hook
  (web-mode . my-web-mode-hook)
  :mode ("\\.html\\'"))
#+end_src
* JSON .json
JSON file support.

Without json-mode, Emacs uses js-mode for .json files.

#+begin_src elisp
(use-package json-mode
  :ensure t
  :pin melpa-stable
  :init
  (defun my-json-mode-hook ()
    (progn
      (setq-local flycheck-check-syntax-automatically '(save mode-enabled))
      (flycheck-mode 1)))
  :hook
  (json-mode . my-json-mode-hook))
#+end_src
* YAML .yml .yaml
Support for .yml and .yaml files.

#+begin_src elisp
(use-package yaml-mode
  :ensure t
  :pin melpa-stable)
#+end_src
* Markdown .md
Markdown file support.

Dependencies:
- See =my-markdown-command=

See:
- https://github.com/jrblevin/markdown-mode
#+begin_src elisp
(use-package markdown-mode
  :ensure t
  :pin melpa-stable
  :init
  (setq
   markdown-command my-markdown-command
   markdown-enable-prefix-prompts nil
   markdown-use-pandoc-style-yaml-metadata t)
  :mode
  (("README\\.md\\'" . gfm-mode)
   ("\\.md\\'" . markdown-mode)
   ("\\.markdown\\'" . markdown-mode)))
#+end_src
