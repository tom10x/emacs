#+TITLE: Emacs
#+DESCRIPTION: My Emacs setup

* init.example.el
** set-charset-priority
Not sure what this does:
: (set-charset-priority 'unicode)
But it doesn't seem to hurt..

** iso-transl (Ubuntu)
iso-transl can fix errors like <dead_tilde> <dead-acute> ...

On some non-English systems running Linux, trying to type an
accented character, for example with a tilde (~), will result in
“<dead_tilde> is undefined”.

See:
- https://www.emacswiki.org/emacs/DeadKeys
* use-package
** :init
Code in =:init= is executed before module is loaded. Restrict to code
that would work even if loading of module would fail.
** :ensure
Using =:ensure nil= for built-in packages.
* init-calendar-sv
Swedish calendar & date & time.
* init-core
** ace-window
Using melpa because, at the time of writing, current version is 0.9.0 released 2015, with 97 commits since then.

See:
- https://github.com/abo-abo/ace-window
** amx
amx replaces smex.
ivy uses amx if it's installed.
** avy
ivy uses avy if it's installed.
** company
Text completion framework

=company-begin-backend= can be used to start a specific backend

=M-n= / =M-p= cycles through options

=M-(digit)= completes one of the first 10 candidates.

Stops at the first backend with a result.

Backends built-in:

- company-capf completion-at-point-functions, supports any major mode with a proper completion function
- company-dabbrev-code dynamic abbrev for code symbols: prog-mode batch-file-mode csharp-mode css-mode erlang-mode haskell-mode jde-mode lua-mode python-mode (and derivatives)
- company-dabbrev dynamic abbrev, not mode-specific, key bindings `M-/' and `C-M-/'
- company-files file names, not mode-specific
- company-keywords programming language keywords, supports many modes (see source code)
- company-etags access etags (names => definitions): prog-mode c-mode objc-mode c++-mode java-mode jde-mode pascal-mode perl-mode python-mode
- company-bbdb BBDB (contact management utility) in message-mode (editing mail and news)
- company-clang c-mode c++-mode objc-mode
- company-cmake cmake-mode
- company-eclim Eclim (binary) access to Eclipse Java IDE features. Recommendation is to use emacs-eclim instead.
- company-gtags GNU Global, I currently don't have it installed
- company-oddmuse oddmuse-mode (edit Oddmuse wikis)
- company-semantic semantic-mode (enables convenience functions for some programming languages, global minor mode), probably "-"
- company-xcode Xcode stuff
** custom
If we wanted to load the custom-file we could do
: (load custom-file 'noerror)
** flycheck
Standard tool for linting.
Provides syntax checking via external external programs or
services. Multiple checkers can be run in sequence, see
`flycheck-add-next-checker'.

Not using global-flycheck-mode, prefer to activate it when needed.

Using melpa, because latest version is 31, which was released in 2017,
and there's been 570+ commits since then.

| Key     | Description          |
|---------+----------------------|
| C-c ! v | verify setup         |
| C-c ! ? | describe checker     |
| C-c ! l | show error list      |
| M-g n   | go to next error     |
| M-g p   | go to previous error |

See:
- https://www.flycheck.org
- https://github.com/flycheck/flycheck
** helpful
Nicer emacs help

See:
- https://github.com/Wilfred/helpful

** ivy
Generic completion frontend (selection from list)

=C-o m= toggles the current regexp builder.

=(ivy-mode 1)= sets completing-read-function to ivy-completing-read.

See:
- https://github.com/abo-abo/swiper
- http://oremacs.com/swiper/
** ivy-rich
Rich info for ivy searches

See:
- https://github.com/Yevgnen/ivy-rich

** swiper
isearch with an overview (incremental search)

Notable minibuffer key bindings:

=M-i= insert current candidate into the minibuffer

See
- https://github.com/abo-abo/swiper

** yasnippet
Custom snippets go in =~/.emacs.d/snippets= and take precedence

=yas-describe-tables= lists available snippets
* init-backup
Backups, auto-saves, sessions, lockfiles.

- backup files (~file)
  Emacs creates a backup file the first time a buffer is saved, and ONLY the first time
- auto-save files (#file#)
- session files (<pid>-<hostname>~)
  Emacs records information about interrupted sessions in files named
  <pid>-<hostname>~ in the directory specified by auto-save-list-file-prefix
- special "symbolic link" file on windows (.#file)
  created on first modification of buffer visiting a file
  created in the same directory as the file
  file is removed when changes are saved

See:
- https://www.gnu.org/software/emacs/manual/html_node/emacs/Recover.html
* init-calendar
The function =sv-easter= was pretty much copied from https://bigwalter.net/daniel/elisp/sv-kalender.el
* init-json
Without json-mode, Emacs uses js-mode for .json files.
* init-lsp
Client/library for the Language Server Protocol. Uses flycheck for
linting, and company-capf for code completion.

See
- https://emacs-lsp.github.io/lsp-mode/page/performance/ about lsp-idle-delay

* init-lsp-python

Dependencies:
- =pip install 'python-language-server[all]'=
 =[all]= installs =yapf rope pyflakes mccabe pycodestyle ...=
- =pip install flake8=

flake8 is configurable with a config file file in project root, e.g.
".flake8". After changing config file, run =M-x lsp-workspace-restart=.

See:
- https://github.com/palantir/python-language-server
- https://gitlab.com/pycqa/flake8
* init-lsp-yaml

Dependencies:
  =npm i -g yaml-language-server=

See:
- https://emacs-lsp.github.io/lsp-mode/page/lsp-yaml/
- https://stable.melpa.org/#/yaml-mode
- https://www.emacswiki.org/emacs/YamlMode
* init-magit
Magit is a complete text-based user interface to Git.

Most Magit commands are commonly invoked from the status buffer. It
can be considered the primary interface for interacting with Git
using Magit.

Status buffer commands:

| Key | Description                                                                                      |
|-----+--------------------------------------------------------------------------------------------------|
| =p=   | prevous section                                                                                  |
| =n=   | next section                                                                                     |
| =q=   | quit                                                                                             |
| =TAB= | fold/unfold sections                                                                             |
| =s=   | stage change at point from the working tree to the index, the change remains in the working tree |
| =u=   | unstage change at point, remove change from the index, the change remains in the working tree    |
| =k=   | discard unstaged change at point, remove from index (if staged change) and working tree          |
| =v=   | reverse                                                                                          |
| =C-n= | next line inside hunk                                                                            |
| =C-p= | next/previous line inside hunk                                                                   |
| =C-.= | select part of hunk with C-. and C-n/C-p to stage/unstage part of hunk                           |
|     | C-n stage or unstage next part of hunk                                                           |
|     | C-p stage or unstage previous part of hunk                                                       |
| =c=   | show commit commands                                                                             |
|     | C-c C-c create commit                                                                            |
| =P=   | show push commands                                                                               |
|     | p push                                                                                           |
| =h=   | list transients                                                                                  |

* init-markdown

To use all of the features of markdown-mode, you'll need to
install the Emacs package itself and also have a local Markdown
processor installed (e.g., Markdown.pl, MultiMarkdown, or Pandoc).

Dependencies:
- pandoc

See:
- https://github.com/jrblevin/markdown-mode
* init-org

Note sure about
: (setq org-agenda-prefer-last-repeat t)
Removed it for now.

See:
- https://orgmode.org/manual/Export-settings.html
- https://orgmode.org/manual/The-export-dispatcher.html
* init-projectile

Commands available after prefix key:

| Key | Description                                                                   |
|-----+-------------------------------------------------------------------------------|
| =p=   | Switch to project                                                             |
| =f=   | Open file in project                                                          |
| =s g= | Run grep on the files in the project.                                         |
| =o=   | Runs multi-occur on all project buffers currently open.                       |
| =r=   | Runs interactive query-replace on all files in the projects.                  |
| =e=   | Shows a list of recently visited project files.                               |
| =!=   | Runs shell-command in the root directory of the project.                      |
| =C=   | Runs a standard configure command for your type of project.                   |
| =c=   | Runs a standard compilation command for your type of project.                 |
| =P=   | Runs a standard test command for your type of project.                        |
| =l=   | Display a list of all files in a directory (that’s not necessarily a project) |

The use-package way of defining a prefix key:
#+begin_example
:bind-keymap
("C-c p" . projectile-command-map)
#+end_example

Another way to do it:
#+begin_example
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_example

See:
- https://docs.projectile.mx/en/latest/

* init-spelling
To find where the dictionary files are, run hunspell once, then check
=ispell-hunspell-dict-paths-alist=

Switch dictionary with =M-x ispell-change-dictionary=

On Ubuntu 20.04
- =hunspell-sv= provides =/usr/share/hunspell/sv_SE.dic=
- =hunspell-en-us= provides =/usr/share/hunspell/en_US.dic=
* init-web

The package =company-web= provides company backend =company-web-html= for web-mode

Known bugs:
- There is an issue setting =web-mode-engines-alist= in .dir-locals.el -
  web mode will not pick it up. It won't pick it up using the function
  =dir-locals-set-class-variables= either.

Log:
- 2020-11-13 pin to melpa instead of melpa-stable, hopefully fixes some formatting issues.

See:
- https://web-mode.org/
